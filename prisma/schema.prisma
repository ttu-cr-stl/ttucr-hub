generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  firstName           String
  lastName            String
  profilePic          String?
  major               String
  minor               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  address             String?
  username            String                @id @unique
  points              Int                   @default(0)
  isNewUser           Boolean               @default(true)
  EventAttendance     EventAttendance[]
  HackathonSession    HackathonSession[]
  HackathonSubmission HackathonSubmission[]
  orgs                Org[]                 @relation("OrgToUser")
}

model Event {
  id              String            @id @default(cuid())
  name            String
  description     String
  startTime       DateTime
  location        String
  organizer       String
  category        String
  coverImg        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  messages        String[]
  reward          Int               @default(0)
  closed          Boolean           @default(false)
  endTime         DateTime?
  userLimit       Int?
  publishedAt     DateTime?
  status          EventStatus       @default(DRAFT)
  EventAttendance EventAttendance[]
}

model Org {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  color       String?
  orgPicture  String?
  officers    Json[]    @default([])
  category    String?
  members     User[]    @relation("OrgToUser")
}

model EventAttendance {
  id       String   @id @default(cuid())
  eventId  String
  signedUp DateTime @default(now())
  attended Boolean  @default(false)
  username String
  Event    Event    @relation(fields: [eventId], references: [id])
  User     User     @relation(fields: [username], references: [username])

  @@unique([username, eventId])
}

model HackathonSubmission {
  id             String           @id @default(cuid())
  username       String
  challengeId    String
  score          Int              @default(0)
  completed      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sessionId      String
  completionTime Int
  session        HackathonSession @relation(fields: [sessionId], references: [id])
  user           User             @relation(fields: [username], references: [username])

  @@unique([username, challengeId, sessionId])
  @@index([sessionId])
  @@index([username])
}

model HackathonSession {
  id          String                @id @default(cuid())
  username    String
  startTime   DateTime              @default(now())
  endTime     DateTime?
  totalScore  Int                   @default(0)
  isActive    Boolean               @default(true)
  user        User                  @relation(fields: [username], references: [username])
  submissions HackathonSubmission[]

  @@index([username, isActive])
  @@index([username])
}

enum EventStatus {
  DRAFT
  PUBLISHED
}
